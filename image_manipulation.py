# -*- coding: utf-8 -*-
"""Image Manipulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19noxfAHaTEuRqwIYDkjYquSNNc4kgp8J
"""

!pip install -U google-generativeai

import os
from google import genai
from google.colab import files as colab_files
from IPython.display import Image, display
from google.genai import types

# Install this line in Colab if needed
# !pip install -U google-generativeai

def save_binary_file(file_name, data):
    with open(file_name, "wb") as f:
        f.write(data)

def generate():
    # Set your API key (set this in your environment or directly here for testing)
    os.environ["GEMINI_API_KEY"] = "AIzaSyBQCzigpu2LhpdH2bA8rLIs90BrgyrN3AY"
    client = genai.Client(api_key=os.environ["GEMINI_API_KEY"])

    # Upload image from local Colab files
    uploaded = colab_files.upload()
    image_file = next(iter(uploaded))  # Get uploaded filename
    uploaded_file = client.files.upload(file=image_file)

    # Ask user for prompt
    user_prompt = input("What would you like to do with this image?")

    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_uri(
                    file_uri=uploaded_file.uri,
                    mime_type=uploaded_file.mime_type,
                ),
                types.Part.from_text(text=user_prompt),
            ],
        )
    ]

    generate_content_config = types.GenerateContentConfig(
        temperature=1,
        top_p=0.95,
        top_k=40,
        max_output_tokens=8192,
        response_modalities=["image", "text"],
        safety_settings=[
            types.SafetySetting(
                category="HARM_CATEGORY_CIVIC_INTEGRITY",
                threshold="OFF",
            ),
        ],
        response_mime_type="text/plain",
    )

    for chunk in client.models.generate_content_stream(
        model="gemini-2.0-flash-exp-image-generation",
        contents=contents,
        config=generate_content_config,
    ):
        if (
            chunk.candidates
            and chunk.candidates[0].content
            and chunk.candidates[0].content.parts
            and chunk.candidates[0].content.parts[0].inline_data
        ):
            file_name = "output.jpg"
            save_binary_file(file_name, chunk.candidates[0].content.parts[0].inline_data.data)
            print("Image saved. Displaying below:")
            display(Image(filename=file_name))
        elif chunk.text:
            print(chunk.text)

# Run the function
generate()